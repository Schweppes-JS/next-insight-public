# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "Schweppes-JS"
repo = "next-insight-public"

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
See [conventional commits](https://www.conventionalcommits.org/) for commit guidelines.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for parsing and grouping commits
commit_parsers = [
  # Pattern matches for Added
  { message = "^\\[Add\\]", group = "<!-- 0 -->🚀 Added" },
  { message = "^\\[Feature\\]", group = "<!-- 0 -->🚀 Added" },
  { message = "^[a|A]dd", group = "<!-- 0 -->🚀 Added" },
  { message = "^[s|S]upport", group = "<!-- 0 -->🚀 Added" },
  { message = "^.*: add", group = "<!-- 0 -->🚀 Added" },
  { message = "^.*: support", group = "<!-- 0 -->🚀 Added" },
  { message = "^Feat\\(.*\\)", group = "<!-- 0 -->🚀 Added" },
  { message = "^feat\\(.*\\)", group = "<!-- 0 -->🚀 Added" },

  # Pattern matches for Removed
  { message = "^\\[Remove\\]", group = "<!-- 1 -->🔥 Removed" },
  { message = "^[r|R]emove", group = "<!-- 1 -->🔥 Removed" },
  { message = "^.*: remove", group = "<!-- 1 -->🔥 Removed" },
  { message = "^.*: delete", group = "<!-- 1 -->🔥 Removed" },

  # Pattern matches for Fixed
  { message = "^\\[Fix\\]", group = "<!-- 2 -->🐛 Fixed" },
  { message = "^\\[Bugfix\\]", group = "<!-- 2 -->🐛 Fixed" },
  { message = "^\\[Hotfix\\]", group = "<!-- 2 -->🐛 Fixed" },
  { message = "^test", group = "<!-- 2 -->🐛 Fixed" },
  { message = "^fix", group = "<!-- 2 -->🐛 Fixed" },
  { message = "^.*: fix", group = "<!-- 2 -->🐛 Fixed" },

  # Pattern matches for Changed
  { message = "^\\[Refactor\\]", group = "<!-- 3 -->🔄 Changed" },
  { message = "^\\[Update\\]", group = "<!-- 3 -->🔄 Changed" },
  { message = "^\\[Change\\]", group = "<!-- 3 -->🔄 Changed" },
  { message = "^\\[Style\\]", group = "<!-- 3 -->🔄 Changed" },
  { message = "^\\[Chore\\]", group = "<!-- 3 -->🔄 Changed" },

  # Pattern matches for Miscellaneous Tasks
  { message = "^\\[Misc\\]", group = "<!-- 4 -->⚙️ Miscellaneous Tasks" },
  { message = "^\\[Miscellaneous\\]", group = "<!-- 4 -->⚙️ Miscellaneous Tasks" },
  { message = "^\\[Chore\\(.*\\)\\]", group = "<!-- 4 -->⚙️ Miscellaneous Tasks" },
  { message = "^.*: chore", group = "<!-- 4 -->⚙️ Miscellaneous Tasks" },
  { message = "^chore", group = "<!-- 4 -->⚙️ Miscellaneous Tasks" },

  # Ignore change logging
  { message = "^\\[Merge\\]", skip = true },
  { message = "^.*: merge", skip = true },
  { message = "^merge", skip = true },
  { message = "^\\[Release\\]", skip = true },
  { message = "^.*: release", skip = true },
  { message = "^release", skip = true },

  # Catch all
  { message = "^.*", group = "<!-- 5 -->💼 Other" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"